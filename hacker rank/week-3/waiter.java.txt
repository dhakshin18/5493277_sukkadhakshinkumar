import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'waiter' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY number
     *  2. INTEGER q
     */

    public static List<Integer> waiter(List<Integer> number, int q) {
        
        List<Integer> result = new ArrayList<>();
        List<Integer> prm = gprm(q);
        Stack<Integer> b = new Stack<>();
        b.addAll(number);
        
        for (int i=0;i<q;i++){
            Stack<Integer> c =new Stack<>(), d = new Stack<>();
            int y = prm.get(i);
            while (!b.isEmpty()) {
                int z = b.pop();
                if(z%y == 0){
                    d.push(z);
                }
                else{
                     c.push(z);
                }
                
            }
            
            while (!d.isEmpty()) result.add(d.pop());
            b = c;
        }
        
        while (!b.isEmpty()) result.add(b.pop());
        return result;
    // Write your code here
    
    

    }
    
    private static List<Integer> gprm (int q){
        List<Integer> prm = new ArrayList<>();
        for(int e=2;prm.size()<q;e++){
            boolean p = true;
            for(int t=2;t*t <= e;t++){
                if(e%t == 0){
                    p = false;
                    break;
                }
                
            }
            
            if(p) prm.add(e);
            
            
        }
        return prm;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int q = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> number = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.waiter(number, q);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
