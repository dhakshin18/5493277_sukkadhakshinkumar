import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
    int[] intArray = arr.stream().mapToInt(Integer::intValue).toArray();
    int n = intArray.length;
    long maxsum=0;
    long maxelement=0;
    long minelement=intArray[0];
    
    for(int i=0;i<n;i++){
        maxsum=intArray[i]+maxsum;
    }
    for(int i=0;i<n;i++){
        if(intArray[i]>maxelement){
            maxelement=intArray[i];
        }
        
    }
    
    for (int i=0;i<n;i++){
        if(intArray[i]<minelement){
            minelement=intArray[i];
        }
    }
    
    long Result1 = maxsum - maxelement;
    long Result2 = maxsum - minelement;
    
    System.out.printf("%d %d",Result1,Result2);

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.miniMaxSum(arr);

        bufferedReader.close();
    }
}
