import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'bomberMan' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING_ARRAY grid
     */

    public static List<String> bomberMan(int n, List<String> grid) {
    // Write your code here

    
    int a = grid.size();
    int b = grid.get(0).length();

    if (n == 1) return grid;

    if (n % 2 == 0) {
        List<String> f = new ArrayList<>();
        StringBuilder r2 = new StringBuilder();
        for (int j = 0; j < b; j++) r2.append("O");   
        for (int i = 0; i < a; i++) f.add(r2.toString());
        return f;
    
    }

    // Function to simulate explosion inline
    java.util.function.Function<List<String>, List<String>> explode = (g1) -> {
        char[][] gh = new char[a][b];
        for (int i = 0; i < a; i++) Arrays.fill(gh[i], 'O');

        for (int i = 0; i < a; i++) {
            for (int j = 0; j < b; j++) {
                if (g1.get(i).charAt(j) == 'O') {
                    gh[i][j] = '.';
                    if (i > 0) gh[i - 1][j] = '.';
                    if (i < a - 1) gh[i + 1][j] = '.';
                    if (j > 0) gh[i][j - 1] = '.';
                    if (j < b - 1) gh[i][j + 1] = '.';
                }
            }
        }

        List<String> solution = new ArrayList<>();
        for (int i = 0; i < a; i++) solution.add(new String(gh[i]));
        return solution;
    };

    List<String> sec = explode.apply(grid);
    return (n % 4 == 3) ? sec : explode.apply(sec);



    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int r = Integer.parseInt(firstMultipleInput[0]);

        int c = Integer.parseInt(firstMultipleInput[1]);

        int n = Integer.parseInt(firstMultipleInput[2]);

        List<String> grid = IntStream.range(0, r).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.bomberMan(n, grid);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
