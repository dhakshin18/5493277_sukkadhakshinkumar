import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'highestValuePalindrome' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER n
     *  3. INTEGER k
     */

    public static String highestValuePalindrome(String s, int n, int k) {
        int l = 0;
        int h = n-1;;
        char[] st = s.toCharArray();
        int d = 0;

        for(int i=0, j=n-1; i<n/2; i++, j--){
            if (st[i] != st[j]){
                d++;
            }
        }

        if (d > k){
            return "-1";
        }

        while(h >= l){
            if (k <= 0){
                break;
            }

            if (st[l] == st[h]){
                if (k > 1 && (k-2) >= d&& st[l] != '9'){
                    st[l] = '9';
                    st[h] = '9';
                    k-=2;
                }
            }
            else {
                if (k > 1 && (k-2) >= d-1){
                    if (st[l] != '9'){
                        st[l] = '9';
                        k--;
                    }
                    if (st[h] != '9'){
                        st[h] = '9';
                        k--;
                    }
                } else {
                    if (st[l] > st[h]){
                        st[h] = st[l];
                    } else {
                        st[l] = st[h];
                    }
                    k--;
                }
                d--;
            }
            if (l == h && k > 0){
                st[l] = '9';
                k--;
            }
            l++;
            h--;
        }

        s = String.valueOf(st);
        return new String(st);
    // Write your code here

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        String s = bufferedReader.readLine();

        String result = Result.highestValuePalindrome(s, n, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
