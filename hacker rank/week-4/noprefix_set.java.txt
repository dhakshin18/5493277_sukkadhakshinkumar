import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'noPrefix' function below.
     *
     * The function accepts STRING_ARRAY words as parameter.
     */
     
      static class TNode {
        Map<Character, TNode> children = new HashMap<>();
        boolean isEndOfWord;
    }

    public static void noPrefix(List<String> words) {
        
        TNode root = new TNode();

        for (String w : words) {
            if (!insert(root, w)) {
                System.out.println("BAD SET");
                System.out.println(w);
                return;
            }
        }
        System.out.println("GOOD SET");
    }

    private static boolean insert(TNode rt, String w) {
        TNode current = rt;
        for (int i = 0; i < w.length(); i++) {
            char ch = w.charAt(i);

            
            current.children.putIfAbsent(ch, new TNode());
            current = current.children.get(ch);

           
            if (current.isEndOfWord) {
                return false;
            }
        }

        
        if (!current.children.isEmpty()) {
            return false;
        }

        current.isEndOfWord = true;
        return true;
        
    // Write your code here

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> words = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        Result.noPrefix(words);

        bufferedReader.close();
    }
}
