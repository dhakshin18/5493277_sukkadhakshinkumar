import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'equalStacks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY h1
     *  2. INTEGER_ARRAY h2
     *  3. INTEGER_ARRAY h3
     */

    public static int equalStacks(List<Integer> h1, List<Integer> h2, List<Integer> h3) {
    // Write your code here
    
    int a1 =0;
    int a2 =0;
    int a3 =0;
    Stack<Integer> q1 = new Stack<>();
    Stack<Integer> q2 = new Stack<>();
    Stack<Integer> q3 = new Stack<>();
   
    
    
    
    for ( int i=h1.size()-1;i>=0;i--){
        a1 = a1 + h1.get(i);
        q1.push(h1.get(i));
          
        
        
    }
    
    for ( int j=h2.size()-1;j>=0;j--){
        a2 = a2 + h2.get(j);
        q2.push(h2.get(j));
    }
    
    for (int k=h3.size()-1;k>=0;k--){
        a3 = a3 + h3.get(k);
        q3.push(h3.get(k));
    }
    
    while(!(a1 == a2 && a2 == a3)){
        if(a1 >= a2 && a1>=a3){
            a1 = a1 - q1.pop();
        }
        else if (a2 >= a1 && a2 >= a3){
            a2 = a2 - q2.pop();
        }
        else{
            a3 = a3 - q3.pop();
        }
    }
    
    return a1;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n1 = Integer.parseInt(firstMultipleInput[0]);

        int n2 = Integer.parseInt(firstMultipleInput[1]);

        int n3 = Integer.parseInt(firstMultipleInput[2]);

        List<Integer> h1 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h2 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h3 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
